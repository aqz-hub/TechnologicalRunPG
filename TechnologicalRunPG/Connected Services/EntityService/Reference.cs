//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechnologicalRunPG.EntityService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebData", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Common.Models")]
    [System.SerializableAttribute()]
    public partial class WebData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechnologicalRunPG.EntityService.WebDataItem[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechnologicalRunPG.EntityService.WebDataItem[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebDataItem", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Common.Models")]
    [System.SerializableAttribute()]
    public partial class WebDataItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechnologicalRunPG.EntityService.WebData DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechnologicalRunPG.EntityService.WebData[] DataArrayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechnologicalRunPG.EntityService.WebData Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechnologicalRunPG.EntityService.WebData[] DataArray {
            get {
                return this.DataArrayField;
            }
            set {
                if ((object.ReferenceEquals(this.DataArrayField, value) != true)) {
                    this.DataArrayField = value;
                    this.RaisePropertyChanged("DataArray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicServiceException", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Services.Public")]
    [System.SerializableAttribute()]
    public partial class PublicServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TechnologicalRunPG.EntityService.PublicServiceException InnerExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TechnologicalRunPG.EntityService.PublicServiceException InnerException {
            get {
                return this.InnerExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerExceptionField, value) != true)) {
                    this.InnerExceptionField = value;
                    this.RaisePropertyChanged("InnerException");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusCode {
            get {
                return this.StatusCodeField;
            }
            set {
                if ((this.StatusCodeField.Equals(value) != true)) {
                    this.StatusCodeField = value;
                    this.RaisePropertyChanged("StatusCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.elma-bpm.ru/api/", ConfigurationName="EntityService.IEntityService")]
    public interface IEntityService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Load", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/LoadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TechnologicalRunPG.EntityService.PublicServiceException), Action="http://www.elma-bpm.ru/api//LoadPublicServiceExceptionFault", Name="PublicServiceException", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Services.Public")]
        TechnologicalRunPG.EntityService.WebData Load(string typeuid, string entityid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Load", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/LoadResponse")]
        System.Threading.Tasks.Task<TechnologicalRunPG.EntityService.WebData> LoadAsync(string typeuid, string entityid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/LoadTree", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/LoadTreeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TechnologicalRunPG.EntityService.PublicServiceException), Action="http://www.elma-bpm.ru/api//LoadTreePublicServiceExceptionFault", Name="PublicServiceException", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Services.Public")]
        TechnologicalRunPG.EntityService.WebData LoadTree(string typeuid, string entityid, string select);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/LoadTree", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/LoadTreeResponse")]
        System.Threading.Tasks.Task<TechnologicalRunPG.EntityService.WebData> LoadTreeAsync(string typeuid, string entityid, string select);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Count", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/CountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TechnologicalRunPG.EntityService.PublicServiceException), Action="http://www.elma-bpm.ru/api//CountPublicServiceExceptionFault", Name="PublicServiceException", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Services.Public")]
        long Count(string typeuid, string eqlQuery, string filterProviderUid, string filterProviderData, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Count", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/CountResponse")]
        System.Threading.Tasks.Task<long> CountAsync(string typeuid, string eqlQuery, string filterProviderUid, string filterProviderData, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Query", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/QueryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TechnologicalRunPG.EntityService.PublicServiceException), Action="http://www.elma-bpm.ru/api//QueryPublicServiceExceptionFault", Name="PublicServiceException", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Services.Public")]
        TechnologicalRunPG.EntityService.WebData[] Query(string typeuid, string eqlQuery, string sort, int limit, int offset, string filterProviderUid, string filterProviderData, string filter, bool loadDisplayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Query", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/QueryResponse")]
        System.Threading.Tasks.Task<TechnologicalRunPG.EntityService.WebData[]> QueryAsync(string typeuid, string eqlQuery, string sort, int limit, int offset, string filterProviderUid, string filterProviderData, string filter, bool loadDisplayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/QueryTree", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/QueryTreeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TechnologicalRunPG.EntityService.PublicServiceException), Action="http://www.elma-bpm.ru/api//QueryTreePublicServiceExceptionFault", Name="PublicServiceException", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Services.Public")]
        TechnologicalRunPG.EntityService.WebData[] QueryTree(string typeuid, string eqlQuery, string select, string sort, int limit, int offset, string filterProviderUid, string filterProviderData, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/QueryTree", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/QueryTreeResponse")]
        System.Threading.Tasks.Task<TechnologicalRunPG.EntityService.WebData[]> QueryTreeAsync(string typeuid, string eqlQuery, string select, string sort, int limit, int offset, string filterProviderUid, string filterProviderData, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Insert", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/InsertResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TechnologicalRunPG.EntityService.PublicServiceException), Action="http://www.elma-bpm.ru/api//InsertPublicServiceExceptionFault", Name="PublicServiceException", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Services.Public")]
        string Insert(string typeuid, TechnologicalRunPG.EntityService.WebData entityData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Insert", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/InsertResponse")]
        System.Threading.Tasks.Task<string> InsertAsync(string typeuid, TechnologicalRunPG.EntityService.WebData entityData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Update", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TechnologicalRunPG.EntityService.PublicServiceException), Action="http://www.elma-bpm.ru/api//UpdatePublicServiceExceptionFault", Name="PublicServiceException", Namespace="http://schemas.datacontract.org/2004/07/EleWise.ELMA.Services.Public")]
        string Update(string typeuid, string entityid, TechnologicalRunPG.EntityService.WebData entityData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elma-bpm.ru/api/IEntityService/Update", ReplyAction="http://www.elma-bpm.ru/api/IEntityService/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(string typeuid, string entityid, TechnologicalRunPG.EntityService.WebData entityData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEntityServiceChannel : TechnologicalRunPG.EntityService.IEntityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EntityServiceClient : System.ServiceModel.ClientBase<TechnologicalRunPG.EntityService.IEntityService>, TechnologicalRunPG.EntityService.IEntityService {
        
        public EntityServiceClient() {
        }
        
        public EntityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EntityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EntityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EntityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TechnologicalRunPG.EntityService.WebData Load(string typeuid, string entityid) {
            return base.Channel.Load(typeuid, entityid);
        }
        
        public System.Threading.Tasks.Task<TechnologicalRunPG.EntityService.WebData> LoadAsync(string typeuid, string entityid) {
            return base.Channel.LoadAsync(typeuid, entityid);
        }
        
        public TechnologicalRunPG.EntityService.WebData LoadTree(string typeuid, string entityid, string select) {
            return base.Channel.LoadTree(typeuid, entityid, select);
        }
        
        public System.Threading.Tasks.Task<TechnologicalRunPG.EntityService.WebData> LoadTreeAsync(string typeuid, string entityid, string select) {
            return base.Channel.LoadTreeAsync(typeuid, entityid, select);
        }
        
        public long Count(string typeuid, string eqlQuery, string filterProviderUid, string filterProviderData, string filter) {
            return base.Channel.Count(typeuid, eqlQuery, filterProviderUid, filterProviderData, filter);
        }
        
        public System.Threading.Tasks.Task<long> CountAsync(string typeuid, string eqlQuery, string filterProviderUid, string filterProviderData, string filter) {
            return base.Channel.CountAsync(typeuid, eqlQuery, filterProviderUid, filterProviderData, filter);
        }
        
        public TechnologicalRunPG.EntityService.WebData[] Query(string typeuid, string eqlQuery, string sort, int limit, int offset, string filterProviderUid, string filterProviderData, string filter, bool loadDisplayName) {
            return base.Channel.Query(typeuid, eqlQuery, sort, limit, offset, filterProviderUid, filterProviderData, filter, loadDisplayName);
        }
        
        public System.Threading.Tasks.Task<TechnologicalRunPG.EntityService.WebData[]> QueryAsync(string typeuid, string eqlQuery, string sort, int limit, int offset, string filterProviderUid, string filterProviderData, string filter, bool loadDisplayName) {
            return base.Channel.QueryAsync(typeuid, eqlQuery, sort, limit, offset, filterProviderUid, filterProviderData, filter, loadDisplayName);
        }
        
        public TechnologicalRunPG.EntityService.WebData[] QueryTree(string typeuid, string eqlQuery, string select, string sort, int limit, int offset, string filterProviderUid, string filterProviderData, string filter) {
            return base.Channel.QueryTree(typeuid, eqlQuery, select, sort, limit, offset, filterProviderUid, filterProviderData, filter);
        }
        
        public System.Threading.Tasks.Task<TechnologicalRunPG.EntityService.WebData[]> QueryTreeAsync(string typeuid, string eqlQuery, string select, string sort, int limit, int offset, string filterProviderUid, string filterProviderData, string filter) {
            return base.Channel.QueryTreeAsync(typeuid, eqlQuery, select, sort, limit, offset, filterProviderUid, filterProviderData, filter);
        }
        
        public string Insert(string typeuid, TechnologicalRunPG.EntityService.WebData entityData) {
            return base.Channel.Insert(typeuid, entityData);
        }
        
        public System.Threading.Tasks.Task<string> InsertAsync(string typeuid, TechnologicalRunPG.EntityService.WebData entityData) {
            return base.Channel.InsertAsync(typeuid, entityData);
        }
        
        public string Update(string typeuid, string entityid, TechnologicalRunPG.EntityService.WebData entityData) {
            return base.Channel.Update(typeuid, entityid, entityData);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(string typeuid, string entityid, TechnologicalRunPG.EntityService.WebData entityData) {
            return base.Channel.UpdateAsync(typeuid, entityid, entityData);
        }
    }
}
